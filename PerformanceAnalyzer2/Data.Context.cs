//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PerformanceAnalyzer2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class PerformanceAnalyzerDataContext : DbContext
    {
        public PerformanceAnalyzerDataContext()
            : base("name=PerformanceAnalyzerDataContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AcedemicYear> AcedemicYears { get; set; }
        public DbSet<Course> Courses { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Enrollment> Enrollments { get; set; }
        public DbSet<Faculty> Faculties { get; set; }
        public DbSet<Member> Members { get; set; }
        public DbSet<Message> Messages { get; set; }
        public DbSet<Module> Modules { get; set; }
        public DbSet<ResultMapping> ResultMappings { get; set; }
        public DbSet<Semester> Semesters { get; set; }
        public DbSet<Semester_Module> Semester_Module { get; set; }
        public DbSet<TelephoneNumber> TelephoneNumbers { get; set; }
        public DbSet<University> Universities { get; set; }
    
        public virtual ObjectResult<spGetAdminProfileInfo_Result> spGetAdminProfileInfo(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdminProfileInfo_Result>("spGetAdminProfileInfo", emailParameter);
        }
    
        public virtual ObjectResult<spGetIndustryProfessionalData_Result> spGetIndustryProfessionalData(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetIndustryProfessionalData_Result>("spGetIndustryProfessionalData", userIDParameter);
        }
    
        public virtual ObjectResult<spGetLectureData_Result> spGetLectureData(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetLectureData_Result>("spGetLectureData", userIDParameter);
        }
    
        public virtual ObjectResult<spGetStudentData_Result> spGetStudentData(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStudentData_Result>("spGetStudentData", userIDParameter);
        }
    
        public virtual ObjectResult<spGetAdminData_Result> spGetAdminData(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdminData_Result>("spGetAdminData", userIDParameter);
        }
    
        public virtual int spUpdateAdmin(Nullable<int> userID, string userName, string email, string linkedin, string description)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var linkedinParameter = linkedin != null ?
                new ObjectParameter("linkedin", linkedin) :
                new ObjectParameter("linkedin", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateAdmin", userIDParameter, userNameParameter, emailParameter, linkedinParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<spGetAdminDataNew_Result> spGetAdminDataNew(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAdminDataNew_Result>("spGetAdminDataNew", userIDParameter);
        }
    
        public virtual int spUpdateBasicCourseInfo(string name, string batch, Nullable<int> universityID, Nullable<int> facultyID, Nullable<int> departmentID, Nullable<int> adminID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("batch", batch) :
                new ObjectParameter("batch", typeof(string));
    
            var universityIDParameter = universityID.HasValue ?
                new ObjectParameter("universityID", universityID) :
                new ObjectParameter("universityID", typeof(int));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("facultyID", facultyID) :
                new ObjectParameter("facultyID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("adminID", adminID) :
                new ObjectParameter("adminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateBasicCourseInfo", nameParameter, batchParameter, universityIDParameter, facultyIDParameter, departmentIDParameter, adminIDParameter);
        }
    
        public virtual int spInsertBasicCourseInfo(string name, string batch, Nullable<int> universityID, Nullable<int> facultyID, Nullable<int> departmentID, Nullable<int> adminID, Nullable<int> semesterCount, Nullable<int> studentCount, Nullable<int> yearCount)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("batch", batch) :
                new ObjectParameter("batch", typeof(string));
    
            var universityIDParameter = universityID.HasValue ?
                new ObjectParameter("universityID", universityID) :
                new ObjectParameter("universityID", typeof(int));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("facultyID", facultyID) :
                new ObjectParameter("facultyID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("adminID", adminID) :
                new ObjectParameter("adminID", typeof(int));
    
            var semesterCountParameter = semesterCount.HasValue ?
                new ObjectParameter("semesterCount", semesterCount) :
                new ObjectParameter("semesterCount", typeof(int));
    
            var studentCountParameter = studentCount.HasValue ?
                new ObjectParameter("studentCount", studentCount) :
                new ObjectParameter("studentCount", typeof(int));
    
            var yearCountParameter = yearCount.HasValue ?
                new ObjectParameter("yearCount", yearCount) :
                new ObjectParameter("yearCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertBasicCourseInfo", nameParameter, batchParameter, universityIDParameter, facultyIDParameter, departmentIDParameter, adminIDParameter, semesterCountParameter, studentCountParameter, yearCountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spGetMaxCourseID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spGetMaxCourseID");
        }
    
        public virtual ObjectResult<spGetSemeterInfo_Result> spGetSemeterInfo(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSemeterInfo_Result>("spGetSemeterInfo", courseIDParameter);
        }
    
        public virtual ObjectResult<spGetSemeterInfoNew_Result> spGetSemeterInfoNew(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSemeterInfoNew_Result>("spGetSemeterInfoNew", courseIDParameter);
        }
    
        public virtual int spDeleteModuleBySemester(Nullable<int> semesterID, string moduleCode)
        {
            var semesterIDParameter = semesterID.HasValue ?
                new ObjectParameter("semesterID", semesterID) :
                new ObjectParameter("semesterID", typeof(int));
    
            var moduleCodeParameter = moduleCode != null ?
                new ObjectParameter("moduleCode", moduleCode) :
                new ObjectParameter("moduleCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteModuleBySemester", semesterIDParameter, moduleCodeParameter);
        }
    
        public virtual ObjectResult<spGetModuleInfoBySemester_Result> spGetModuleInfoBySemester(Nullable<int> semesterID)
        {
            var semesterIDParameter = semesterID.HasValue ?
                new ObjectParameter("semesterID", semesterID) :
                new ObjectParameter("semesterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetModuleInfoBySemester_Result>("spGetModuleInfoBySemester", semesterIDParameter);
        }
    
        public virtual int spInsertModuleBySemester(Nullable<int> semesterID, string moduleCode, string lecturerName)
        {
            var semesterIDParameter = semesterID.HasValue ?
                new ObjectParameter("semesterID", semesterID) :
                new ObjectParameter("semesterID", typeof(int));
    
            var moduleCodeParameter = moduleCode != null ?
                new ObjectParameter("moduleCode", moduleCode) :
                new ObjectParameter("moduleCode", typeof(string));
    
            var lecturerNameParameter = lecturerName != null ?
                new ObjectParameter("lecturerName", lecturerName) :
                new ObjectParameter("lecturerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertModuleBySemester", semesterIDParameter, moduleCodeParameter, lecturerNameParameter);
        }
    
        public virtual ObjectResult<spGetModuleInfoBySemesterNew_Result> spGetModuleInfoBySemesterNew(Nullable<int> semesterID)
        {
            var semesterIDParameter = semesterID.HasValue ?
                new ObjectParameter("semesterID", semesterID) :
                new ObjectParameter("semesterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetModuleInfoBySemesterNew_Result>("spGetModuleInfoBySemesterNew", semesterIDParameter);
        }
    
        public virtual ObjectResult<getStudentBasicInfo_Result> getStudentBasicInfo(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStudentBasicInfo_Result>("getStudentBasicInfo", courseIDParameter);
        }
    
        public virtual int spUpdateStudentBasicInfo(Nullable<int> userID, string userName, string indexNo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var indexNoParameter = indexNo != null ?
                new ObjectParameter("indexNo", indexNo) :
                new ObjectParameter("indexNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateStudentBasicInfo", userIDParameter, userNameParameter, indexNoParameter);
        }
    
        public virtual ObjectResult<getStudentBasicInfoNew_Result> getStudentBasicInfoNew(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getStudentBasicInfoNew_Result>("getStudentBasicInfoNew", courseIDParameter);
        }
    
        public virtual int spSetCommonPassword(Nullable<int> courseID, string password)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSetCommonPassword", courseIDParameter, passwordParameter);
        }
    
        public virtual int spEditBasicCourseInfo(Nullable<int> courseID, string name, string batch, Nullable<int> universityID, Nullable<int> facultyID, Nullable<int> departmentID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var batchParameter = batch != null ?
                new ObjectParameter("batch", batch) :
                new ObjectParameter("batch", typeof(string));
    
            var universityIDParameter = universityID.HasValue ?
                new ObjectParameter("universityID", universityID) :
                new ObjectParameter("universityID", typeof(int));
    
            var facultyIDParameter = facultyID.HasValue ?
                new ObjectParameter("facultyID", facultyID) :
                new ObjectParameter("facultyID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("departmentID", departmentID) :
                new ObjectParameter("departmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEditBasicCourseInfo", courseIDParameter, nameParameter, batchParameter, universityIDParameter, facultyIDParameter, departmentIDParameter);
        }
    
        public virtual ObjectResult<spGetCourseInfo_Result> spGetCourseInfo(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCourseInfo_Result>("spGetCourseInfo", courseIDParameter);
        }
    
        public virtual ObjectResult<spGetCourseInformation_Result> spGetCourseInformation(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCourseInformation_Result>("spGetCourseInformation", courseIDParameter);
        }
    }
}
